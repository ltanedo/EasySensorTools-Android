import com.development.sensor.SensorOuterClass

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sensor.proto

@kotlin.jvm.JvmName("-initializelOCATION")
inline fun lOCATION(block: LOCATIONKt.Dsl.() -> kotlin.Unit): SensorOuterClass.LOCATION =
  LOCATIONKt.Dsl._create(SensorOuterClass.LOCATION.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `LOCATION`
 */
object LOCATIONKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: SensorOuterClass.LOCATION.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: SensorOuterClass.LOCATION.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): SensorOuterClass.LOCATION = _builder.build()

    /**
     * `double latitude = 1;`
     */
    var latitude: kotlin.Double
      @JvmName("getLatitude")
      get() = _builder.getLatitude()
      @JvmName("setLatitude")
      set(value) {
        _builder.setLatitude(value)
      }
    /**
     * `double latitude = 1;`
     */
    fun clearLatitude() {
      _builder.clearLatitude()
    }

    /**
     * `double longitude = 2;`
     */
    var longitude: kotlin.Double
      @JvmName("getLongitude")
      get() = _builder.getLongitude()
      @JvmName("setLongitude")
      set(value) {
        _builder.setLongitude(value)
      }
    /**
     * `double longitude = 2;`
     */
    fun clearLongitude() {
      _builder.clearLongitude()
    }

    /**
     * `double altitude = 3;`
     */
    var altitude: kotlin.Double
      @JvmName("getAltitude")
      get() = _builder.getAltitude()
      @JvmName("setAltitude")
      set(value) {
        _builder.setAltitude(value)
      }
    /**
     * `double altitude = 3;`
     */
    fun clearAltitude() {
      _builder.clearAltitude()
    }

    /**
     * `double speed = 4;`
     */
    var speed: kotlin.Double
      @JvmName("getSpeed")
      get() = _builder.getSpeed()
      @JvmName("setSpeed")
      set(value) {
        _builder.setSpeed(value)
      }
    /**
     * `double speed = 4;`
     */
    fun clearSpeed() {
      _builder.clearSpeed()
    }

    /**
     * ```
     * time in "Sensor" class 
     * ```
     *
     * `int64 time = 5;`
     */
    var time: kotlin.Long
      @JvmName("getTime")
      get() = _builder.getTime()
      @JvmName("setTime")
      set(value) {
        _builder.setTime(value)
      }
    /**
     * ```
     * time in "Sensor" class 
     * ```
     *
     * `int64 time = 5;`
     */
    fun clearTime() {
      _builder.clearTime()
    }

    /**
     * `double accuracy = 6;`
     */
    var accuracy: kotlin.Double
      @JvmName("getAccuracy")
      get() = _builder.getAccuracy()
      @JvmName("setAccuracy")
      set(value) {
        _builder.setAccuracy(value)
      }
    /**
     * `double accuracy = 6;`
     */
    fun clearAccuracy() {
      _builder.clearAccuracy()
    }

    /**
     * `double verticalAccuracyMeters = 7;`
     */
    var verticalAccuracyMeters: kotlin.Double
      @JvmName("getVerticalAccuracyMeters")
      get() = _builder.getVerticalAccuracyMeters()
      @JvmName("setVerticalAccuracyMeters")
      set(value) {
        _builder.setVerticalAccuracyMeters(value)
      }
    /**
     * `double verticalAccuracyMeters = 7;`
     */
    fun clearVerticalAccuracyMeters() {
      _builder.clearVerticalAccuracyMeters()
    }

    /**
     * `double speedAccuracyMetersPerSecond = 8;`
     */
    var speedAccuracyMetersPerSecond: kotlin.Double
      @JvmName("getSpeedAccuracyMetersPerSecond")
      get() = _builder.getSpeedAccuracyMetersPerSecond()
      @JvmName("setSpeedAccuracyMetersPerSecond")
      set(value) {
        _builder.setSpeedAccuracyMetersPerSecond(value)
      }
    /**
     * `double speedAccuracyMetersPerSecond = 8;`
     */
    fun clearSpeedAccuracyMetersPerSecond() {
      _builder.clearSpeedAccuracyMetersPerSecond()
    }

    /**
     * `double bearingAccuracyDegrees = 9;`
     */
    var bearingAccuracyDegrees: kotlin.Double
      @JvmName("getBearingAccuracyDegrees")
      get() = _builder.getBearingAccuracyDegrees()
      @JvmName("setBearingAccuracyDegrees")
      set(value) {
        _builder.setBearingAccuracyDegrees(value)
      }
    /**
     * `double bearingAccuracyDegrees = 9;`
     */
    fun clearBearingAccuracyDegrees() {
      _builder.clearBearingAccuracyDegrees()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun SensorOuterClass.LOCATION.copy(block: LOCATIONKt.Dsl.() -> kotlin.Unit): SensorOuterClass.LOCATION =
  LOCATIONKt.Dsl._create(this.toBuilder()).apply { block() }._build()


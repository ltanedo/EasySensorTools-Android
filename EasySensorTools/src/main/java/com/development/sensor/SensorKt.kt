//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sensor.proto
import com.development.sensor.SensorOuterClass


@kotlin.jvm.JvmName("-initializesensor")
inline fun sensor(block: SensorKt.Dsl.() -> kotlin.Unit): SensorOuterClass.Sensor =
  SensorKt.Dsl._create(SensorOuterClass.Sensor.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `Sensor`
 */
object SensorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: SensorOuterClass.Sensor.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: SensorOuterClass.Sensor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): SensorOuterClass.Sensor = _builder.build()

    /**
     * `int64 timestamp = 1;`
     */
    var timestamp: kotlin.Long
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * `int64 timestamp = 1;`
     */
    fun clearTimestamp() {
      _builder.clearTimestamp()
    }

    /**
     * `.LOCATION loc = 2;`
     */
    var loc: SensorOuterClass.LOCATION
      @JvmName("getLoc")
      get() = _builder.getLoc()
      @JvmName("setLoc")
      set(value) {
        _builder.setLoc(value)
      }
    /**
     * `.LOCATION loc = 2;`
     */
    fun clearLoc() {
      _builder.clearLoc()
    }
    /**
     * `.LOCATION loc = 2;`
     * @return Whether the loc field is set.
     */
    fun hasLoc(): kotlin.Boolean {
      return _builder.hasLoc()
    }

    /**
     * ```
     * required 
     * ```
     *
     * `.TYPE_ACCELEROMETER acc = 3;`
     */
    var acc: SensorOuterClass.TYPE_ACCELEROMETER
      @JvmName("getAcc")
      get() = _builder.getAcc()
      @JvmName("setAcc")
      set(value) {
        _builder.setAcc(value)
      }
    /**
     * ```
     * required 
     * ```
     *
     * `.TYPE_ACCELEROMETER acc = 3;`
     */
    fun clearAcc() {
      _builder.clearAcc()
    }
    /**
     * ```
     * required 
     * ```
     *
     * `.TYPE_ACCELEROMETER acc = 3;`
     * @return Whether the acc field is set.
     */
    fun hasAcc(): kotlin.Boolean {
      return _builder.hasAcc()
    }

    /**
     * `.TYPE_ROTATION_VECTOR rot = 4;`
     */
    var rot: SensorOuterClass.TYPE_ROTATION_VECTOR
      @JvmName("getRot")
      get() = _builder.getRot()
      @JvmName("setRot")
      set(value) {
        _builder.setRot(value)
      }
    /**
     * `.TYPE_ROTATION_VECTOR rot = 4;`
     */
    fun clearRot() {
      _builder.clearRot()
    }
    /**
     * `.TYPE_ROTATION_VECTOR rot = 4;`
     * @return Whether the rot field is set.
     */
    fun hasRot(): kotlin.Boolean {
      return _builder.hasRot()
    }

    /**
     * `.TYPE_GYROSCOPE gyr = 5;`
     */
    var gyr: SensorOuterClass.TYPE_GYROSCOPE
      @JvmName("getGyr")
      get() = _builder.getGyr()
      @JvmName("setGyr")
      set(value) {
        _builder.setGyr(value)
      }
    /**
     * `.TYPE_GYROSCOPE gyr = 5;`
     */
    fun clearGyr() {
      _builder.clearGyr()
    }
    /**
     * `.TYPE_GYROSCOPE gyr = 5;`
     * @return Whether the gyr field is set.
     */
    fun hasGyr(): kotlin.Boolean {
      return _builder.hasGyr()
    }

    /**
     * ```
     * optional 
     * ```
     *
     * `optional .TYPE_LINEAR_ACCELERATION lin = 6;`
     */
    var lin: SensorOuterClass.TYPE_LINEAR_ACCELERATION
      @JvmName("getLin")
      get() = _builder.getLin()
      @JvmName("setLin")
      set(value) {
        _builder.setLin(value)
      }
    /**
     * ```
     * optional 
     * ```
     *
     * `optional .TYPE_LINEAR_ACCELERATION lin = 6;`
     */
    fun clearLin() {
      _builder.clearLin()
    }
    /**
     * ```
     * optional 
     * ```
     *
     * `optional .TYPE_LINEAR_ACCELERATION lin = 6;`
     * @return Whether the lin field is set.
     */
    fun hasLin(): kotlin.Boolean {
      return _builder.hasLin()
    }
    val SensorKt.Dsl.linOrNull: SensorOuterClass.TYPE_LINEAR_ACCELERATION?
      get() = _builder.linOrNull

    /**
     * `optional .TYPE_GRAVITY gra = 7;`
     */
    var gra: SensorOuterClass.TYPE_GRAVITY
      @JvmName("getGra")
      get() = _builder.getGra()
      @JvmName("setGra")
      set(value) {
        _builder.setGra(value)
      }
    /**
     * `optional .TYPE_GRAVITY gra = 7;`
     */
    fun clearGra() {
      _builder.clearGra()
    }
    /**
     * `optional .TYPE_GRAVITY gra = 7;`
     * @return Whether the gra field is set.
     */
    fun hasGra(): kotlin.Boolean {
      return _builder.hasGra()
    }
    val SensorKt.Dsl.graOrNull: SensorOuterClass.TYPE_GRAVITY?
      get() = _builder.graOrNull

    /**
     * `optional .TYPE_MAGNETIC_FIELD mag = 8;`
     */
    var mag: SensorOuterClass.TYPE_MAGNETIC_FIELD
      @JvmName("getMag")
      get() = _builder.getMag()
      @JvmName("setMag")
      set(value) {
        _builder.setMag(value)
      }
    /**
     * `optional .TYPE_MAGNETIC_FIELD mag = 8;`
     */
    fun clearMag() {
      _builder.clearMag()
    }
    /**
     * `optional .TYPE_MAGNETIC_FIELD mag = 8;`
     * @return Whether the mag field is set.
     */
    fun hasMag(): kotlin.Boolean {
      return _builder.hasMag()
    }
    val SensorKt.Dsl.magOrNull: SensorOuterClass.TYPE_MAGNETIC_FIELD?
      get() = _builder.magOrNull

    /**
     * `optional .TYPE_ORIENTATION ori = 9;`
     */
    var ori: SensorOuterClass.TYPE_ORIENTATION
      @JvmName("getOri")
      get() = _builder.getOri()
      @JvmName("setOri")
      set(value) {
        _builder.setOri(value)
      }
    /**
     * `optional .TYPE_ORIENTATION ori = 9;`
     */
    fun clearOri() {
      _builder.clearOri()
    }
    /**
     * `optional .TYPE_ORIENTATION ori = 9;`
     * @return Whether the ori field is set.
     */
    fun hasOri(): kotlin.Boolean {
      return _builder.hasOri()
    }
    val SensorKt.Dsl.oriOrNull: SensorOuterClass.TYPE_ORIENTATION?
      get() = _builder.oriOrNull
  }
}
@kotlin.jvm.JvmSynthetic
inline fun SensorOuterClass.Sensor.copy(block: SensorKt.Dsl.() -> kotlin.Unit): SensorOuterClass.Sensor =
  SensorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val SensorOuterClass.SensorOrBuilder.locOrNull: SensorOuterClass.LOCATION?
  get() = if (hasLoc()) getLoc() else null

val SensorOuterClass.SensorOrBuilder.accOrNull: SensorOuterClass.TYPE_ACCELEROMETER?
  get() = if (hasAcc()) getAcc() else null

val SensorOuterClass.SensorOrBuilder.rotOrNull: SensorOuterClass.TYPE_ROTATION_VECTOR?
  get() = if (hasRot()) getRot() else null

val SensorOuterClass.SensorOrBuilder.gyrOrNull: SensorOuterClass.TYPE_GYROSCOPE?
  get() = if (hasGyr()) getGyr() else null

val SensorOuterClass.SensorOrBuilder.linOrNull: SensorOuterClass.TYPE_LINEAR_ACCELERATION?
  get() = if (hasLin()) getLin() else null

val SensorOuterClass.SensorOrBuilder.graOrNull: SensorOuterClass.TYPE_GRAVITY?
  get() = if (hasGra()) getGra() else null

val SensorOuterClass.SensorOrBuilder.magOrNull: SensorOuterClass.TYPE_MAGNETIC_FIELD?
  get() = if (hasMag()) getMag() else null

val SensorOuterClass.SensorOrBuilder.oriOrNull: SensorOuterClass.TYPE_ORIENTATION?
  get() = if (hasOri()) getOri() else null

